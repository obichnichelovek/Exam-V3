@page "/advanced-search"
@using System.Text
@using MangaLibrary.Shared.Enums;
@using MangaLibrary.Shared.Models.Manga;
@inject MangaService Service

@if (!searching)
{
    @if (Service.Genres is null || Service.Tags is null)
    {
        <div class="loading">
        </div>
    }
    else
    {
        <div class="box">
            <h5>Advanced Search</h5>
            <div class="search">
                <select class="elem">
                    <option>Starts With</option>
                    <option>Contains</option>
                    <option>Ends With</option>
                </select>
                <input @bind-value="request.Title" @bind-value:event="oninput" class="elem" type="text" name="manga" placeholder="Search manga by name..." />
            </div>
            <div class="search">
                <select class="elem">
                    <option>Starts With</option>
                    <option>Contains</option>
                    <option>Ends With</option>
                </select>
                <input @bind-value="request.Author" @bind-value:event="oninput" class="elem" type="text" name="author" placeholder="Search manga by author...." />
            </div>
            <div class="search">
                <select class="elem">
                    <option>Starts With</option>
                    <option>Contains</option>
                    <option>Ends With</option>
                </select>
                <input @bind-value="request.Artist" @bind-value:event="oninput" class="elem" type="text" name="artist" placeholder="Search manga by artist..." />
            </div>
            <div class="search">
                <select class="elem">
                    <option>Starts With</option>
                    <option>Contains</option>
                    <option>Ends With</option>
                </select>
                <input @bind-value="request.Publishing" @bind-value:event="oninput" class="elem" type="text" name="publishing" placeholder="Search manga by publishing..." />
            </div>
            <div class="search">
                <select @bind="request.YearSearchOption" class="elem">
                    <option>In</option>
                    <option>Before</option>
                    <option>After</option>
                </select>
                <input @bind-value="request.Year" @bind-value:event="oninput" class="elem" type="text" placeholder="Release year..." />
            </div>
            <hr />
            <h3>Tags</h3>
            <div class="tag-container">
                @foreach (var tag in Service.Tags)
                {
                    <a title="@tag.Description" @onclick="() => IncludeTag(tag.ID)" class="@tagArray[tag.ID]" style="margin: 2px">@tag.Name</a>
                }
            </div>
            <hr />
            <h3>Genres</h3>
            <div class="tag-container">
                @foreach (var genre in Service.Genres)
                {
                    <a title="@genre.Description" @onclick="() => IncludeGenre(genre.ID)" class="@genreArray[genre.ID]" style="margin: 2px">@genre.Name</a>
                }
            </div>
            <hr />
            <h3>Tag Search Mode</h3>
            <div>
                <label for="and">And</label>
                <input id="and" type="radio" name="tagSearchOptions" checked="@(request.TagSearchOption == TagSearchOptions.And)" @onchange="@(() => request.TagSearchOption = TagSearchOptions.And)" />
                <label for="or">Or</label>
                <input id="or" type="radio" name="tagSearchOptions" checked="@(request.TagSearchOption == TagSearchOptions.Or)" @onchange="@(() => request.TagSearchOption = TagSearchOptions.Or)" />
            </div>
            <hr />
            <h3>Sorting Options</h3>
            <div class="sortings">
                <label for="alphabetical">Alphabetical <small>[A-Z]</small></label>
                <input id="alphabetical" type="radio" name="searchOptions" checked="@(request.SearchOption == SearchOptions.Alphabet)" @onchange="@(() => request.SearchOption = SearchOptions.Alphabet)" />
                <label for="alphabeticalDescending">Alphabetical <small>[Z-A]</small></label>
                <input id="alphabeticalDescending" type="radio" name="searchOptions" checked="@(request.SearchOption == SearchOptions.AlphabetDescending)" @onchange="@(() => request.SearchOption = SearchOptions.AlphabetDescending)" />

                <label for="rating">Rating <small>[Low-High]</small></label>
                <input id="rating" type="radio" name="searchOptions" checked="@(request.SearchOption == SearchOptions.Rating)" @onchange="@(() => request.SearchOption = SearchOptions.Rating)" />
                <label for="ratingDescending">Rating <small>[High-Low]</small></label>
                <input id="ratingDescending" type="radio" name="searchOptions" checked="@(request.SearchOption == SearchOptions.RatingDescending)" @onchange="@(() => request.SearchOption = SearchOptions.RatingDescending)" />

                <label for="year">Year <small>[Old-New]</small></label>
                <input id="year" type="radio" name="searchOptions" checked="@(request.SearchOption == SearchOptions.Year)" @onchange="@(() => request.SearchOption = SearchOptions.Year)" />
                <label for="yearDescending">Year <small>[New-Old]</small></label>
                <input id="yearDescending" type="radio" name="searchOptions" checked="@(request.SearchOption == SearchOptions.YearDescending)" @onchange="@(() => request.SearchOption = SearchOptions.YearDescending)" />

                <label for="added">Last Added <small>[Old-New]</small></label>
                <input id="added" type="radio" name="searchOptions" checked="@(request.SearchOption == SearchOptions.Add)" @onchange="@(() => request.SearchOption = SearchOptions.Add)" />
                <label for="addedDescending">Last Added <small>[New-Old]</small></label>
                <input id="addedDescending" type="radio" name="searchOptions" checked="@(request.SearchOption == SearchOptions.AddDescending)" @onchange="@(() => request.SearchOption = SearchOptions.AddDescending)" />

                <label for="updated">Last Updated <small>[Old-New]</small></label>
                <input id="updated" type="radio" name="searchOptions" checked="@(request.SearchOption == SearchOptions.Update)" @onchange="@(() => request.SearchOption = SearchOptions.Update)" />
                <label for="updatedDescending">Last Updated <small>[New-Old]</small></label>
                <input id="updatedDescending" type="radio" name="searchOptions" checked="@(request.SearchOption == SearchOptions.UpdateDescending)" @onchange="@(() => request.SearchOption = SearchOptions.UpdateDescending)" />
            </div>
            <button @onclick="() => Search()" class="elem submit-button" type="submit">Search</button>
        </div>
    }
}
else if (Service.Mangas is not null)
{
    <h3>MangaList</h3>
    <ul class="box-manga">
        @foreach (var manga in Service.Mangas)
        {
            <li class="card">
                <svg class="favorite" xmlns="http://www.w3.org/2000/svg" height="16" width="16" viewBox="0 0 512 512"><path d="M225.8 468.2l-2.5-2.3L48.1 303.2C17.4 274.7 0 234.7 0 192.8v-3.3c0-70.4 50-130.8 119.2-144C158.6 37.9 198.9 47 231 69.6c9 6.4 17.4 13.8 25 22.3c4.2-4.8 8.7-9.2 13.5-13.3c3.7-3.2 7.5-6.2 11.5-9c0 0 0 0 0 0C313.1 47 353.4 37.9 392.8 45.4C462 58.6 512 119.1 512 189.5v3.3c0 41.9-17.4 81.9-48.1 110.4L288.7 465.9l-2.5 2.3c-8.2 7.6-19 11.9-30.2 11.9s-22-4.2-30.2-11.9zM239.1 145c-.4-.3-.7-.7-1-1.1l-17.8-20c0 0-.1-.1-.1-.1c0 0 0 0 0 0c-23.1-25.9-58-37.7-92-31.2C81.6 101.5 48 142.1 48 189.5v3.3c0 28.5 11.9 55.8 32.8 75.2L256 430.7 431.2 268c20.9-19.4 32.8-46.7 32.8-75.2v-3.3c0-47.3-33.6-88-80.1-96.9c-34-6.5-69 5.4-92 31.2c0 0 0 0-.1 .1s0 0-.1 .1l-17.8 20c-.3 .4-.7 .7-1 1.1c-4.5 4.5-10.6 7-16.9 7s-12.4-2.5-16.9-7z" /></svg>
                <svg class="bookmark" xmlns="http://www.w3.org/2000/svg" height="16" width="16" viewBox="0 0 384 512"><path d="M0 48C0 21.5 21.5 0 48 0l0 48V441.4l130.1-92.9c8.3-6 19.6-6 27.9 0L336 441.4V48H48V0H336c26.5 0 48 21.5 48 48V488c0 9-5 17.2-13 21.3s-17.6 3.4-24.9-1.8L192 397.5 37.9 507.5c-7.3 5.2-16.9 5.9-24.9 1.8S0 497 0 488V48z" /></svg>
                <a style="margin: 0; width: 100%; height: 320px;" href="@manga.ID">
                    <img class="card-poster" src="@manga.Poster" alt="@manga.Title.English" />
                </a>
                <div class="card-panel">
                    <div class="card-title" id="titles" title="@manga.Title.Japanese
(@manga.Title.Romaji)">
                        <h4 class="title-english">@manga.Title.English</h4>
                        <h6 class="title-japanese">@manga.Title.Japanese</h6>
                    </div>
                    <div class="card-right-side">
                        <div class="card-rating">
                            <h4 class="rating-score" title="@manga.Rating">@(Tools.GetStars(manga.Rating))</h4>
                        </div>
                        <svg class="see-more" xmlns="http://www.w3.org/2000/svg" height="16" width="14" viewBox="0 0 448 512"><path d="M384 32c35.3 0 64 28.7 64 64V416c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V96C0 60.7 28.7 32 64 32H384zM160 144c-13.3 0-24 10.7-24 24s10.7 24 24 24h94.1L119 327c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l135-135V328c0 13.3 10.7 24 24 24s24-10.7 24-24V168c0-13.3-10.7-24-24-24H160z" /></svg>
                    </div>
                </div>

            </li>
        }
    </ul>
}


@code {
    public bool searching = false;
    private static AdvancedSearchRequest request = new();

    public static string[] genreArray = Enumerable.Repeat("default", 24).ToArray();
    public static string[] tagArray = Enumerable.Repeat("default", 64).ToArray();

    private const string _default = "default";
    private const string included = "included";
    private const string excluded = "excluded";

    public async void Search()
    {
        var nameOptions = new StringBuilder(4);

        await Service.AdvancedSearch(request);
    }

    public static void IncludeGenre(int id)
    {
        switch (genreArray[id])
        {
            case _default:
                request.Genres.Add(id);
                genreArray[id] = included;
                break;
            case included:
                request.Genres.Remove(id);
                request.GenreBlacklist.Add(id);
                genreArray[id] = excluded;
                break;
            case excluded:
                request.GenreBlacklist.Remove(id);
                genreArray[id] = _default;
                break;
            default:
                request.Genres.Remove(id);
                request.GenreBlacklist.Remove(id);
                genreArray[id] = _default;
                break;
        }
    }

    public static void IncludeTag(int id)
    {
        switch (tagArray[id])
        {
            case _default:
                request.Tags.Add(id);
                tagArray[id] = included;
                break;
            case included:
                request.Tags.Remove(id);
                request.TagBlacklist.Add(id);
                tagArray[id] = excluded;
                break;
            case excluded:
                request.TagBlacklist.Remove(id);
                tagArray[id] = _default;
                break;
            default:
                request.Tags.Remove(id);
                request.TagBlacklist.Remove(id);
                tagArray[id] = _default;
                break;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Service.GetTags();
        await Service.GetGenres();
    }
}
